- name: Ensure required Variables
  ansible.builtin.assert:
    that:
      - proxmox_storage != ''

- name: Ensure qemu-img is available
  ansible.builtin.command: "qemu-img --version"
  register: qemu_img_version
  changed_when: false
  delegate_to: proxmox-node

- name: Fail if qemu-img is not found
  ansible.builtin.fail:
    msg: "qemu-img is not installed! Please install it manually or ensure Proxmox has it."
  when: qemu_img_version.rc != 0
  delegate_to: proxmox-node

- name: Ensure ISO Storage Variables Exists
  ansible.builtin.assert:
    that:
      - local_iso_dir != ''
  delegate_to: proxmox-node

- name: Ensure ISO dir exists
  ansible.builtin.file:
    path: "{{ local_iso_dir }}"
    state: directory
  delegate_to: proxmox-node

- name: Check if ISO already exists
  ansible.builtin.stat:
    path: "{{ local_iso_dir }}/{{download_fedora_iso_name }}"
  register: file_stat
  delegate_to: proxmox-node

- name: Set download path and VM name
  ansible.builtin.set_fact:
    download_fedora_iso_image_path: "{{ local_iso_dir }}/{{ download_fedora_iso_name }}"
    download_fedora_raw_image_path: "{{ local_iso_dir }}/{{ download_fedora_raw_name }}"
    proxmox_registry_vm_name: "{{ proxmox_registry_vm_name | default(download_fedora_iso_proxmox_registry_vm_name) }}"

- name: Create Cloud Init Startup Script
  ansible.builtin.include_tasks: cloud_init_startup.yaml

- name: Download the ISO if doesn't exist
  ansible.builtin.include_tasks: download_image.yaml
  when: not file_stat.stat.exists

- name: Create the VM
  ansible.builtin.include_tasks: create_vm.yaml

- name: Post-creation VM tasks
  ansible.builtin.include_tasks: post_creation.yaml